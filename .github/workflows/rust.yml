name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Ubuntu Latest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Info
      run: |
        pwd
        rustc -V
        cargo -V
    - name: Test CLI
      run: cargo test
    - name: Build CLI
      run: cargo build --release
    - name: Example Multiplatform Setup
      run: |
        PATH=$(pwd)/target/release:$PATH
        cd example/multiplatform
        cargo container setup
    - name: Example Multiplatform Build
      run: |
        PATH=$(pwd)/target/release:$PATH
        cd example/multiplatform
        cargo container build --config debug --config release --skip-install
    - name: Example Multiplatform Test
      run: |
        PATH=$(pwd)/target/release:$PATH
        cd example/multiplatform
        cargo container test  --config debug --config release --skip-install
  build-windows:
    name: Windows 2019 Server
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Info
      run: |
        cd
        try { wsl --list } catch {}
        try { wslconfig /list } catch {}
        Get-AppxPackage -Name *Ubuntu*
        rustc -V
        cargo -V
    - name: Test CLI
      run: cargo test
    - name: Build CLI
      run: cargo build --release
    - name: Example Multiplatform Setup
      run: |
        $env:PATH = (Get-Location).Path + ";" + $env:PATH
        cd example/multiplatform
        cargo container setup
    - name: Example Multiplatform Build
      run: |
        $env:PATH = (Get-Location).Path + ";" + $env:PATH
        cd example/multiplatform
        cargo container build --config debug --config release --skip-install
    - name: Example Multiplatform Test
      run: |
        $env:PATH = (Get-Location).Path + ";" + $env:PATH
        cd example/multiplatform
        cargo container test  --config debug --config release --skip-install
