use platform_common::*;

use mmrbi::*;
use mmrbi::env::*;
use mmrbi::fs::write_if_modified_with as wimw;

use std::ffi::OsString;
use std::io::Write;



fn main() { platform_common::exec(Tool, "stdweb") }

struct Tool;
impl platform_common::Tool for Tool {
    fn generate(&self, state: &State) {
        for package in state.packages.iter() {
            let out_dir = package.generated_path();
            std::fs::create_dir_all(&out_dir).unwrap_or_else(|err| fatal!("unable to create `{}`: {}", out_dir.display(), err));

            wimw(out_dir.join("main.rs"), |o|{
                writeln!(o, "// AUTOGENERATED BY {}", env!("CARGO_PKG_NAME"))?;
                writeln!(o)?;
                writeln!(o, "fn main() {{ app::init(app_common::StdwebDialogProvider) }}")?;
                Ok(())
            }).or_die();

            wimw(out_dir.join("Cargo.toml"), |o|{
                writeln!(o, "# AUTOGENERATED BY {}", env!("CARGO_PKG_NAME"))?;
                writeln!(o)?;
                writeln!(o, "[package]")?;
                writeln!(o, "name            = {:?}", package.generated_name())?;
                writeln!(o, "version         = {:?}", package.version())?;
                writeln!(o, "description     = {:?}", package.description())?;
                writeln!(o, "publish         = false")?;
                writeln!(o, "edition         = {:?}", "2018")?;
                writeln!(o)?;
                writeln!(o, "[dependencies]")?;
                writeln!(o, "app-common      = {{ path = {:?}, features = [{:?}] }}", "../../../../app-common", "platform-stdweb")?;
                writeln!(o, "app             = {{ path = {:?}, package = {:?} }}",    package.original_path(), package.original_name())?;
                writeln!(o)?;
                writeln!(o, "[[bin]]")?;
                writeln!(o, "name            = {:?}", package.generated_name())?;
                writeln!(o, "path            = {:?}", "main.rs")?;
                Ok(())
            }).or_die();
        }
    }

    fn build(&self, state: &State) {
        for config in state.configs.iter() {
            for package in state.packages.iter() {
                let mut cmd = Command::new("cargo");
                cmd.current_dir(package.generated_path());
                cmd.args(&["web", "build"]);
                match config.name() {
                    "debug"     => {},
                    "release"   => { cmd.arg("--release"); },
                    other       => fatal!("unexpected config: {:?}", other),
                }
                cmd.status0().or_die();

                wimw(format!("target/wasm32-unknown-unknown/{config}/{package}.html", config=config.name(), package=package.generated_name()), |o|{
                    writeln!(o, "<!DOCTYPE html>")?;
                    writeln!(o, "<html lang=\"en\"><head>")?;
                    writeln!(o, "    <meta charset=\"UTF-8\">")?;
                    writeln!(o, "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">")?;
                    writeln!(o, "    <title>{}</title>", package.original_name())?;
                    writeln!(o, "</head><body>")?;
                    writeln!(o, "    <script src=\"../stdweb-hacks.js\"></script>")?;
                    writeln!(o, "    <script src=\"{}.js\"></script>", package.generated_name())?;
                    writeln!(o, "</body></html>")?;
                    Ok(())
                }).or_die();
            }
        }
        wimw("target/wasm32-unknown-unknown/stdweb-hacks.js", |o| write!(o, "{}", include_str!("stdweb-hacks.js"))).or_die();
    }

    fn test(&self, state: &State) {
        if rustc::version().or_die().is_after(1, 43, 0) { // last known good rustc version
            warning!("skipping tests - `cargo web test` is broken on rustc 1.44+ (see https://github.com/koute/cargo-web/issues/243 for details)");
            return;
        }

        let path = {
            let mut o = OsString::new();
            if cfg!(windows) {
                if let Some(pf86) = opt_var_os("ProgramFiles(x86)") {
                    o.push(pf86);
                    o.push(r"\Google\Chrome\Application\;");
                } else if let Some(pf) = opt_var_os("ProgramFiles") {
                    o.push(pf);
                    o.push(r"\Google\Chrome\Application\;");
                } else if let Some(pf64) = opt_var_os("ProgramW6432") {
                    o.push(pf64);
                    o.push(r"\Google\Chrome\Application\;");
                } else {
                    o.push(r"C:\Program Files (x86)\Google\Chrome\Application\;");
                    o.push(r"C:\Program Files\Google\Chrome\Application\;");
                }
            }
            o.push(req_var_os("PATH"));
            o
        };

        for config in state.configs.iter() {
            for package in state.packages.iter() {
                let mut cmd = Command::new("cargo");
                cmd.current_dir(package.generated_path());
                cmd.args(&["web", "test"]);
                cmd.env("PATH", &path);
                match config.name() {
                    "debug"     => {},
                    "release"   => { cmd.arg("--release"); },
                    other       => fatal!("unexpected config: {:?}", other),
                }
                cmd.status0().or_die();
            }
        }
    }

}
