use platform_common::*;

use mmrbi::*;
use mmrbi::fs::write_if_modified_with as wimw;

use std::io::Write;



fn main() { platform_common::exec(Tool, "console") }

struct Tool;
impl platform_common::Tool for Tool {
    fn generate(&self, state: &State) {
        for package in state.packages.iter() {
            let out_dir = package.generated_path();
            std::fs::create_dir_all(&out_dir).unwrap_or_else(|err| fatal!("unable to create `{}`: {}", out_dir.display(), err));

            wimw(out_dir.join("main.rs"), |o|{
                writeln!(o, "// AUTOGENERATED BY {}", env!("CARGO_PKG_NAME"))?;
                writeln!(o)?;
                writeln!(o, "fn main() {{ app::init(app_common::ConsoleDialogProvider) }}")?;
                Ok(())
            }).or_die();

            wimw(out_dir.join("Cargo.toml"), |o|{
                writeln!(o, "# AUTOGENERATED BY {}", env!("CARGO_PKG_NAME"))?;
                writeln!(o)?;
                writeln!(o, "[package]")?;
                writeln!(o, "name            = {:?}", package.generated_name())?;
                writeln!(o, "version         = {:?}", package.version())?;
                writeln!(o, "description     = {:?}", package.description())?;
                writeln!(o, "publish         = false")?;
                writeln!(o, "edition         = {:?}", "2018")?;
                writeln!(o)?;
                writeln!(o, "[dependencies]")?;
                writeln!(o, "app-common      = {{ path = {:?}, features = [{:?}] }}", "../../../../app-common", "platform-console")?;
                writeln!(o, "app             = {{ path = {:?}, package = {:?} }}",    package.original_path(), package.original_name())?;
                writeln!(o)?;
                writeln!(o, "[[bin]]")?;
                writeln!(o, "name            = {:?}", package.original_name())?;
                writeln!(o, "path            = {:?}", "main.rs")?;
                Ok(())
            }).or_die();
        }
    }

    fn build(&self, state: &State) {
        for config in state.configs.iter() {
            let mut cmd = Command::new("cargo");
            cmd.args(&["build"]);
            match config.name() {
                "debug"     => {},
                "release"   => { cmd.arg("--release"); },
                other       => fatal!("unexpected config: {:?}", other),
            }
            for package in state.packages.iter() { cmd.arg("-p"); cmd.arg(&package.generated_name()); }
            cmd.status0().or_die();
        }
    }

    fn test(&self, state: &State) {
        for config in state.configs.iter() {
            let mut cmd = Command::new("cargo");
            cmd.args(&["test"]);
            match config.name() {
                "debug"     => {},
                "release"   => { cmd.arg("--release"); },
                other       => fatal!("unexpected config: {:?}", other),
            }
            for package in state.packages.iter() { cmd.arg("-p"); cmd.arg(&package.generated_name()); }
            cmd.status0().or_die();
        }
    }
}
